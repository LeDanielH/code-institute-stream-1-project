var gulp = require('gulp'),
    gzip = require('gulp-gzip'),
    localServer = require('gulp-connect');

var src = 'src',
    dest = 'app';

var paths = {
    html: {
        src: src + '/**/*.html',
        srcTemplates: src + '/templates/**/*.html',
        srcRoot: src + '/index.html',
        app: dest + '/'
    },

    styles: {
        src: src + '/styles/**/*.+(scss|sass)',
        app: dest + '/styles/'
    },

    scripts: {
        src: src + '/scripts/',
        app: dest + '/scripts/'
    },

    json: {
        src: src + '/data/**/*.json',
        app: dest + '/data/'
    },

    images: {
        src: src + '/data/images/**/*',
        app: dest + '/data/images/'
    },

    videos: {
        src: src + '/data/videos/**/*',
        app: dest + '/data/videos/'
    },

    audio: {
        src: src + '/data/audio/**/*',
        app: dest + '/data/audio/'
    },

    fonts: {
        src: src + '/styles/fonts/**/*',
        app: dest + '/styles/fonts'
    },

    bower: 'bower_components/',
    deploy: './' + dest + '/**/*', 
};


var jsLibraries = {
    jquery: {
        min: paths.bower + 'jquery/dist/jquery.min.js',
        debug: paths.bower + 'jquery/dist/jquery.min.js'
    },

    angular: {
        min: paths.bower + 'angular/angular.min.js',
        debug: paths.bower + 'angular/angular.js'
    },

    angularRoute: {
        min: paths.bower + 'angular-route/angular-route.min.js',
        debug: paths.bower + 'angular-route/angular-route.js'
    },

    angularResource: {
        min: paths.bower + 'angular-resource/angular-resource.min.js',
        debug: paths.bower + 'angular-resource/angular-resource.js'
    },

    angularSanitize: {
        min: paths.bower + 'angular-sanitize/angular-sanitize.min.js',
        debug: paths.bower + 'angular-sanitize/angular-sanitize.js'
    },

    angularAnimate: {
        min: paths.bower + 'angular-animate/angular-animate.min.js',
        debug: paths.bower + 'angular-animate/angular-animate.js'
    },

    angularFitText: {
        min: paths.bower + 'ngFitText/dist/ng-FitText.min.js'
    },

    d3: {
        min: paths.bower + 'd3/d3.min.js',
        debug: paths.bower + 'd3/d3.js'
    },

    gsap: {
        min: paths.bower + 'gsap/src/minified/TweenMax.min.js',
        debug: paths.bower + 'gsap/src/uncompressed/TweenMax.js'
    }
};

var renderedJsNames = {
    javascript: {
        myJs: 'my-scripts.js',
        debug: 'libraries-debug.js',
        min: 'libraries.min.js'
    }
};

var ignoredJsFilesPaths = [
    '!' + paths.scripts.src + 'temp/*.js',
    '!' + paths.scripts.src + 'autogenerated/templates.js',
    '!' + paths.scripts.src + 'directives/testimonials.js'
];

var ignoredJsFiles = ignoredJsFilesPaths.map(function(file) {
    return '\'' + file + '\'';
}).join();

var ignoreModernizr = '!' + paths.scripts.src + 'autogenerated/modernizr.js';
var watchedJsFiles = [ignoreModernizr, ignoredJsFiles, paths.scripts.src + '**/*.js'];

function pipeEndProcess(path, reload, gulpObj) {
    var result = gulpObj.pipe(gulp.dest(path))
        .pipe(gzip())
        .pipe(gulp.dest(path));

    if (reload) {
        return result.pipe(localServer.reload());
    }
    return result;
}

module.exports = {
    paths: paths,
    jsLibraries: jsLibraries,
    ignoredJsFilesPaths: ignoredJsFilesPaths,
    ignoredJsFiles: ignoredJsFiles,
    ignoreModernizr: ignoreModernizr,
    watchedJsFiles: watchedJsFiles,
    renderedJsNames: renderedJsNames,
    pipeEndProcess: pipeEndProcess
};