var vars = require('./gulp/vars');

var gulp = require('gulp'),
	// GENERAL
	concat = require('gulp-concat'),
	duplicate = require('gulp-rename'),
	gzip = require('gulp-gzip'),
	
	// DEPLOYMENT
	localServer = require('gulp-connect'),
	deploy = require('gulp-gh-pages'),

	// HTML
	nanofyHtml = require('gulp-htmlmin'),
	stripHtmlComments = require('gulp-strip-comments'),

	// CSS
	processSass = require('gulp-sass'),
	nanofyCss = require('gulp-cssnano'),
	purgeCss = require('gulp-css-purge'),
	stripCssComments = require('gulp-strip-css-comments'),
	// uncss = require('gulp-uncss'),
	
	// JAVASCRIPT
	uglifyJs = require('gulp-uglify'),
	modernizeJs = require('gulp-modernizr'),
	checkJs = require('gulp-jshint'),
	templateCache = require('gulp-angular-templatecache'),

	// IMAGES
	cache = require('gulp-cache'),
	minifyImages = require('gulp-imagemin');

// var pipeEndProcess = function(path) {
	// var pipePath = "
	//a.pipe(gulp.dest(paths." + path + ")).pipe(gzip()).pipe(gulp.dest(paths." + path + "))";
// 	return pipePath;
// };

// WATCHED TASKS
gulp.task('process-html', [], function() {
	return gulp.src(vars.paths.html.src)
		.pipe(stripHtmlComments())
		.pipe(nanofyHtml())
		.pipe(gulp.dest(vars.paths.html.app))
		.pipe(localServer.reload());
	});

require('./gulp/process-styles');

gulp.task('process-scripts', function() {
	return vars.pipeEndProcess(vars.paths.scripts.app, true,
	  gulp.src([
		vars.ignoredJsFiles,
		vars.paths.scripts.src + 'app.js',
		vars.paths.scripts.src + 'controllers/index.js',
		vars.paths.scripts.src + 'controllers/*.js',
		vars.paths.scripts.src + 'services/*.js',
		vars.paths.scripts.src + 'directives/*.js',
		vars.paths.scripts.src + 'filters/*.js',
		vars.paths.scripts.src + 'autogenerated/*.js'
		])
		.pipe(concat(vars.renderedJsNames.javascript.myJs))
		.pipe(checkJs())
		.pipe(gulp.dest(vars.paths.scripts.app))
		.pipe(duplicate({suffix: '.min'}))
		.pipe(uglifyJs())
		// .pipeEndProcess('scripts.app') --> bottom to be removed
    );
});

gulp.task('cache-angular-templates', ['process-html'], function() {
	return gulp.src(vars.paths.html.srcTemplates)
		.pipe(templateCache())
		.pipe(gulp.dest(vars.paths.scripts.src + 'autogenerated/'));
});

gulp.task('process-json', function() {
	return gulp.src([vars.paths.json.src])
		.pipe(gulp.dest(vars.paths.json.app));
	});

gulp.task('process-images', function() {
	return gulp.src([vars.paths.images.src])
		.pipe(cache(minifyImages({optimizationLevel: 3, progressive: true, interlaced: true })))
		.pipe(gulp.dest(vars.paths.images.app));
	});


// RUN ONCE TASKS
gulp.task('process-fonts', function() {
	return gulp.src([vars.paths.fonts.src])
		.pipe(gulp.dest(vars.paths.fonts.app));
	});

gulp.task('process-js-libraries', function() {
	return vars.pipeEndProcess(vars.paths.scripts.app, false,
	  gulp.src(vars.jsLibrariesMinified)
		.pipe(concat(vars.renderedJsNames.javascript.min))
		.pipe(uglifyJs())
	  )
	});

gulp.task('process-js-debug-libraries', function() {
	return gulp.src(vars.jsLibrariesDebug)
		.pipe(concat(vars.renderedJsNames.javascript.debug))
		.pipe(gulp.dest(vars.paths.scripts.app));
	});

gulp.task('modernizeJs', function() {
	return gulp.src(vars.watchedJsFiles)
		.pipe(modernizeJs())
		.pipe(gulp.dest(vars.paths.scripts.src + 'autogenerated/'));
	});

gulp.task('deploy', function() {
	return gulp.src(vars.paths.deploy)
		.pipe(deploy());
	});

// DEFAULT TASKS
gulp.task('localServer', [], function() {
	localServer.server({
		root: vars.paths.html.app,
		livereload: true,
		fallback: vars.paths.html.srcRoot
	});
});

gulp.task('watch', function() {
	gulp.watch(vars.paths.html.src, ['process-html']);
	gulp.watch(vars.paths.styles.src, ['process-styles']);
	gulp.watch(vars.watchedJsFiles, ['process-scripts']);
	gulp.watch(vars.paths.json.src, ['process-json']);
	gulp.watch(vars.paths.images.src, ['process-images']);
});

gulp.task('default', [
	'process-html',
	'process-styles',
	'process-scripts',
	'process-json',
	'process-images',
	'watch',
	'localServer'
]);
	

